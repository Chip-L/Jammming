{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","handleTermChange","bind","assertThisInitialized","search","inherits","createClass","key","value","e","target","setState","onSearch","react_default","a","createElement","className","onChange","placeholder","onClick","React","Component","Track","renderAction","addTrack","removeTrack","event","onAdd","trackInfo","onRemove","isRemoval","name","artist","album","TrackList","apply","arguments","listOfTracks","tracklist","map","track","Track_Track_Track","id","SearchResults","TrackList_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playListTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","cleanTerm","replace","fetch","headers","Authorization","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","tracks","items","length","artists","uri","savePlaylist","trackUris","userID","method","body","JSON","stringify","playlistID","uris","App","playListName","updatePlaylistName","trackList","find","savedTrack","push","playlist","filter","listTrack","trackURIs","_this2","results","SearchBar_SearchBar_SearchBar","SearchResults_SearchResults_SearchResults","Playlist_Playlist_Playlist","Boolean","hostname","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fecac77.chunk.js","sourcesContent":["const CLIENT_ID = '40c59d9bef634095adc0ebb686cb292e';\r\nconst REDIRECT_URI = 'http://localhost:3000/';\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    };\r\n\r\n    //check local URL to see if we just requested the token\r\n    let accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    let expiresInMatch =  window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    //if the tokens DO NOT exist, then get them from spotify\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1]; //set the access tokens\r\n      let expiresIn = Number(expiresInMatch[1]); // cast the text as a Number\r\n\r\n      window.setTimeout(() => {accessToken = ''}, expiresIn * 1000); //*1000 to remove milliseconds\r\n      window.history.pushState('Access Token', null, '/');\r\n\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=token&scope=playlist-modify-public&redirect_uri=${REDIRECT_URI}`;\r\n      window.location = accessUrl;\r\n    }\r\n\r\n  }, // .getAccessToken\r\n\r\n  search(term) {\r\n    const accessToken = this.getAccessToken(); // move this to local scope - fetches token\r\n    const cleanTerm = term.replace(' ', '%20'); // no spaces\r\n\r\n    return fetch(\r\n      `https://api.spotify.com/v1/search?q=${cleanTerm}&type=track`,\r\n        { headers:\r\n          {Authorization: `Bearer ${accessToken}`}\r\n        }\r\n    ).then((response) => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      };\r\n      throw new Error ('Request failed');\r\n    }, networkError => {console.log(networkError.message);}\r\n    ).then(jsonResponse => {\r\n      let tracks = [];\r\n      if(jsonResponse.tracks.items.length > 0) {\r\n        tracks = jsonResponse.tracks.items.map(\r\n          track => (\r\n            {\r\n              id: track.id,\r\n              name: track.name,\r\n              artist: track.artists[0].name,\r\n              album: track.album.name,\r\n              uri: track.uri,\r\n            }\r\n          )\r\n        );\r\n        };\r\n        return tracks;\r\n      }\r\n    );\r\n  }, // .search\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n    \r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userID;\r\n\r\n    return fetch(\r\n      'https://api.spotify.com/v1/me', {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(\r\n      jsonResponse => {\r\n        userID = jsonResponse.id;\r\n        return fetch(\r\n          `https://api.spotify.com/v1/users/${userID}/playlists`,\r\n          {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify(\r\n              {name: name}\r\n            )\r\n          }\r\n        ).then(\r\n          response => response.json()\r\n        ).then(\r\n          jsonResponse => {\r\n            const playlistID = jsonResponse.id;\r\n            return fetch(\r\n              `https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,\r\n              {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({uris: trackUris})\r\n              }\r\n            );\r\n          }\r\n        );\r\n      }\r\n    );\r\n  }, // .savePlaylist\r\n\r\n}; // Spotify\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nexport class SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      term: ''\r\n    };\r\n\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  handleTermChange(e) {\r\n    let term = e.target.value;\r\n    this.setState({ term: term });\r\n  }\r\n\r\n  search() {\r\n    this.props.onSearch(this.state.term)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nimport './Track.css';\r\n\r\nexport class Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.renderAction = this.renderAction.bind(this);\r\n\r\n    this.addTrack=this.addTrack.bind(this);\r\n    this.removeTrack=this.removeTrack.bind(this);\r\n  }\r\n\r\n  addTrack(event) {\r\n    this.props.onAdd(this.props.trackInfo);\r\n  }\r\n\r\n  removeTrack(event) {\r\n    this.props.onRemove(this.props.trackInfo);\r\n  }\r\n\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return  <a className=\"Track-action\" onClick={this.removeTrack} >-</a>;\r\n    };\r\n    return <a className=\"Track-action\" onClick={this.addTrack} >+</a>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3> {this.props.trackInfo.name} </h3>\r\n          <p> {this.props.trackInfo.artist} | {this.props.trackInfo.album} </p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n/*\r\n*/\r\n","import React from 'react';\r\nimport {Track} from '../Track/Track';\r\n\r\nimport './TrackList.css';\r\n\r\nexport class TrackList extends React.Component {\r\n  render() {\r\n    let listOfTracks;\r\n    if(this.props.tracklist) {\r\n      listOfTracks = this.props.tracklist.map((track) => {\r\n        return(\r\n          <Track\r\n            key={track.id}\r\n            trackInfo={track}\r\n            onAdd={this.props.onAdd}\r\n            onRemove={this.props.onRemove}\r\n            isRemoval={this.props.isRemoval}\r\n          />\r\n        );\r\n      });\r\n    };\r\n\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {listOfTracks}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n/*        {this.props.tracklist.map((track) => {\r\n  return(\r\n    <Track trackInfo={track} key={track.id} />\r\n  );\r\n})} */\r\n","import React from 'react';\r\nimport {TrackList} from '../TrackList/TrackList';\r\n\r\nimport './SearchResults.css';\r\n\r\nexport class SearchResults extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList\r\n          tracklist={this.props.searchResults}\r\n          onAdd={this.props.onAdd}\r\n          isRemoval={false}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport {TrackList} from '../TrackList/TrackList';\r\nimport './Playlist.css';\r\n\r\nexport class Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(e) {\r\n    let name = e.target.value;\r\n\r\n    this.props.onNameChange(name);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input onChange={this.handleNameChange} defaultValue={'New Playlist'} />\r\n        <TrackList\r\n          tracklist={this.props.playListTracks}\r\n          onRemove={this.props.onRemove}\r\n          isRemoval={true}\r\n        />\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave} >\r\n          SAVE TO SPOTIFY\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\nimport {SearchBar} from '../SearchBar/SearchBar';\nimport {SearchResults} from '../SearchResults/SearchResults';\nimport {Playlist} from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify'\nimport './App.css';\n\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      playListName: 'New Playlist',\n      playListTracks: [],\n      searchResults: [],\n\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack =  this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let trackList = this.state.playListTracks;\n\n    if(!trackList.find((savedTrack) => savedTrack.id === track.id)) {\n      trackList.push(track);\n      this.setState({playlist: trackList});\n    };\n  }\n\n  removeTrack(track) {\n    let trackList =\n      this.state.playListTracks.filter(listTrack => listTrack.id !== track.id);\n\n    this.setState({playListTracks: trackList});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playListName: name});\n  }\n\n  savePlaylist() {\n    if (this.state.playListName === 'New Playlist') {\n      console.log('update playlist name');\n      return;\n    }\n\n    let trackURIs = this.state.playListTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playListName, trackURIs);\n    this.setState({\n      playListName: 'New Playlist',\n      playListTracks: [],\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(results => {\n      this.setState({searchResults: results});\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              playListName={this.state.playListName}\n              playListTracks={this.state.playListTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}