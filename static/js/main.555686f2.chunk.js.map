{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","placeholder","React","Component","Track","props","_this","call","renderAction","bind","assertThisInitialized","addTrack","e","target","onAdd","trackInfo","isRemoval","onClick","name","artist","album","TrackList","listOfTracks","tracklist","map","track","Track_Track_Track","id","SearchResults","TrackList_TrackList_TrackList","searchResults","Playlist","defaultValue","playListTracks","App","state","playListName","trackList","find","savedTrack","push","setState","SearchBar_SearchBar_SearchBar","SearchResults_SearchResults_SearchResults","Playlist_Playlist_Playlist","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.555686f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nexport class SearchBar extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input placeholder=\"Enter A Song, Album, or Artist\" />\r\n        <button className=\"SearchButton\">SEARCH</button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nimport './Track.css';\r\n\r\nexport class Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.renderAction = this.renderAction.bind(this);\r\n\r\n    this.addTrack=this.addTrack.bind(this);\r\n  }\r\n\r\n  addTrack(e) {\r\n    let track = e.target.value;\r\n//    console.log('track: ' + this.props.trackInfo);\r\n    this.props.onAdd(this.props.trackInfo);\r\n  }\r\n\r\n  renderAction() {\r\n    if(this.props.isRemoval) {\r\n      return <button className=\"Track-action\" >-</button>;\r\n    } else {\r\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3> {this.props.trackInfo.name} </h3>\r\n          <p> {this.props.trackInfo.artist} | {this.props.trackInfo.album} </p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n/*\r\n*/\r\n","import React from 'react';\r\nimport {Track} from '../Track/Track';\r\n\r\nimport './TrackList.css';\r\n\r\nexport class TrackList extends React.Component {\r\n  render() {\r\n    let listOfTracks;\r\n    if(this.props.tracklist) {\r\n      listOfTracks = this.props.tracklist.map((track) => {\r\n        return(\r\n          <Track\r\n            key={track.id}\r\n            trackInfo={track}\r\n            onAdd={this.props.onAdd}\r\n            isRemoval={this.props.isRemoval}\r\n          />\r\n        );\r\n      });\r\n    };\r\n\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {listOfTracks}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n/*        {this.props.tracklist.map((track) => {\r\n  return(\r\n    <Track trackInfo={track} key={track.id} />\r\n  );\r\n})} */\r\n","import React from 'react';\r\nimport {TrackList} from '../TrackList/TrackList';\r\n\r\nimport './SearchResults.css';\r\n\r\nexport class SearchResults extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList\r\n          tracklist={this.props.searchResults}\r\n          onAdd={this.props.onAdd}\r\n          isRemoval=\"false\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport {TrackList} from '../TrackList/TrackList';\r\nimport './Playlist.css';\r\n\r\nexport class Playlist extends React.Component {\r\n/*\r\n  constructor() {\r\n\r\n  }\r\n*/\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input defaultValue={'New Playlist'} />\r\n        <TrackList tracklist={this.props.playListTracks}/>\r\n        <button className=\"Playlist-save\">SAVE TO SPOTIFY</button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\nimport {SearchBar} from '../SearchBar/SearchBar';\nimport {SearchResults} from '../SearchResults/SearchResults';\nimport {Playlist} from '../Playlist/Playlist';\n\nimport './App.css';\n\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      playListName: 'Chip\\'s Play List',\n      playListTracks: [{name: 'Material Girl',\n                        artist: 'Madonna',\n                        album: 'Like a Virgin',\n                        id: 1},\n                       {name: 'Like a Virgin',\n                        artist: 'Madonna',\n                        album: 'Like a Virgin',\n                        id: 2}],\n      searchResults: [{name: 'Material Girl',\n                       artist: 'Madonna',\n                       album: 'Like a Virgin',\n                       id: 1},\n                      {name: 'Like a Virgin',\n                       artist: 'Madonna',\n                       album: 'Like a Virgin',\n                       id: 2}],\n\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n  }\n\n  addTrack(track) {\n    let trackList = this.state.searchResults;\n\n    if(!trackList.find((savedTrack) => savedTrack.id === track.id)) {\n      trackList.push(track);\n      this.setState({searchResults: trackList});\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar /  >\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <Playlist playListName={this.state.playListName} playListTracks={this.state.playListTracks}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}